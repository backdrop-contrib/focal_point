<?php

/**
 * @file
 * Allow users to specify a focal point on content images.
 */

require_once dirname(__FILE__) .'/focal_point.effects.inc';

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function focal_point_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if (_focal_point_field_supported($form['#field'], $form['#instance'])) {
    $form['instance']['settings']['focal_point_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable focal point on this field'),
      '#description' => t('This will allow you to specify what part of the image is the most important. This information can then be used when cropping the image to make sure that the good stuff doesn\'t get cropped out.'),
      '#default_value' => !empty($form['#instance']['settings']['focal_point_enabled']),
    );
  }
}

/**
 * Implementation of hook_widget_form_alter().
 */
function focal_point_field_widget_form_alter(&$element, &$form_state, $context) {
  if (_focal_point_field_supported($context['field'], $context['instance'], TRUE)) {
    $widget_type = $context['instance']['widget']['type'];
    foreach (element_children($element) as $delta) {
      $element[$delta]['#attributes']['class'][] = 'focal_point';
      if (function_exists('focal_point_widget_'. $widget_type .'_process')) {
        $element[$delta]['#process'][] = 'focal_point_widget_'. $widget_type .'_process';
        $element[$delta]['#widget_delta'] = $delta;
      }
    }
  }
}

/**
 * Field widget process function.
 */
function focal_point_widget_image_image_process($element, &$form_state, $form) {
  // If a file has already been uploaded, include the necessary components of
  // for the focal point widget.
  $default_value = isset($element['#default_value']['focal_point']) ? $element['#default_value']['focal_point'] : '';
  $access = (bool) !empty($element['#file']);
  $delta = $element['#widget_delta'];
  $element['focal_point'] = _focal_point_field($delta, $default_value, $access);

  return $element;
}

/**
 * Implements template_preprocess_image_widget().
 */
function focal_point_preprocess_image_widget(&$variables) {
  $element = &$variables['element'];

  // Add the "indicator" to the default image widget.
  if (isset($element['preview'])) {
    $element['preview']['#markup'] = _focal_point_indicator($element['#widget_delta']) . $element['preview']['#markup'];
  }
}

/**
 * Validation function for the focal point widget.
 */
function focal_point_widget_validate($element, &$form_state, $form) {
  $focal_point = isset($element['#value']['focal_point']) ? $element['#value']['focal_point'] : '';
  if ($element['#file'] && !empty($focal_point) && !preg_match('/^(100|[0-9]{1,2})(,)(100|[0-9]{1,2})$/',$focal_point)) {
    form_error($element['focal_point'], t('Focal points should be in the format ##,## without spaces where the numbers are between 1 and 100.'));
  }
}

/**
 * Implementation of hook_field_attach_insert().
 */
function focal_point_field_attach_insert($entity_type, $entity) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Check every field as its data is being inserted and if it has focal point
  // support, save the focal point data.
  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    $field_name = $instance['field_name'];
    $field = field_info_field($field_name);
    if (_focal_point_field_supported($field, $instance, TRUE)) {
      $wrapper = entity_metadata_wrapper($entity_type, $entity);
      $images = $wrapper->{$field_name}->value();
      _focal_point_images_save($images);
    }
  }
}

/**
 * Implementation of hook_field_attach_update().
 */
function focal_point_field_attach_update($entity_type, $entity) {
  focal_point_field_attach_insert($entity_type, $entity);
}

/**
 * Implementation of hook_query_TAG_alter().
 * Alter queries tagged with file_load_multiple.
 */
function focal_point_query_file_load_multiple_alter(QueryAlterableInterface $query) {
  $query->fields('fp', array('focal_point'));
  $query->leftJoin('focal_point', 'fp', 'fp.fid = base.fid');
}

/**
 * Implementation of hook_file_delete().
 */
function focal_point_file_delete($file) {
  focal_point_delete($file->fid);
}

/**
 * Save the focal point data for a given file.
 *
 * @param int $fid
 *   The id of the image file in question.
 * @param string $focal_point
 *   In the form xx,yy where xx represents the left offset as a percent and yy
 *   represents the top offset as a percent.
 */
function focal_point_save($fid, $focal_point) {
  $existing_focal_point = focal_point_get($fid);
  $record = array(
    'fid' => $fid,
    'focal_point' => $focal_point,
  );

  // Create, update or delete the focal point, but only if it has changed.
  if ($existing_focal_point && $existing_focal_point !== $fid) {
    if (!empty($focal_point)) {
      // The focal point has changed to a non-empty value.
      drupal_write_record('focal_point', $record, 'fid');
      _focal_point_flush($fid);
    }
    else {
      // The focal point has changed to an empty value. Generated images will
      // be flushed in the delete function.
      focal_point_delete($fid);
    }
  }
  elseif (!empty($focal_point)) {
    // The focal point is both new and non-empty.
    drupal_write_record('focal_point', $record);
  }
}

/**
 * Returns the focal point of the given image in the form '12,34' where 12 is
 * the distance from the left edge in percents and 34 is the distance from the
 * top edge in percents. If no focal point is found an empty string is returned.
 *
 * @param int $fid
 *   The fid of the image field entity in question.
 *
 * @return string
 */
function focal_point_get($fid) {
  $focal_points = &drupal_static(__FUNCTION__, array());

  if (!isset($focal_points[$fid])) {
    $focal_points[$fid] = db_select('focal_point')
      ->fields('focal_point')
      ->condition('fid', $fid)
      ->execute()
      ->fetchField();
  }

  return $focal_points[$fid];
}

/**
 * Parse the string representation of the focal point into an array.
 *
 * @param string $focal_point
 *
 * @return array
 *   The x & y offsets (in percents) from the top left corner of the image.
 */
function focal_point_parse($focal_point = '') {
  if (empty($focal_point)) {
    $focal_point = '50,50';
  }

  return array_combine(array('x-offset', 'y-offset'), explode(',', $focal_point));
}

/**
 * Deletes the focal point for the given file entity.
 *
 * @param int $fid
 */
function focal_point_delete($fid) {
  _focal_point_flush($fid);
  db_delete('focal_point')
    ->condition('fid', $fid)
    ->execute();
}

/**
 * Define the focal point text field.
 *
 * @param int $delta (optional)
 *   The delta of the image field to which this focal point field applies.
 * @param string $default_value
 *   The default value of the field
 * @param bool $access (optional)
 *   Whether or not the field should be accessible.
 *
 * @return array
 */
function _focal_point_field($delta = 0, $default_value = '', $access = TRUE) {
  return array(
    '#type' => 'textfield',
    '#title' => 'Focal Point',
    '#description' => t('Specify the focus of this image in the form "leftoffset,topoffset" where offsets are in percents. Ex: 25,75'),
    '#default_value' => $default_value,
    '#access' => $access,
    '#element_validate' => array('focal_point_form_validate'),
    '#attributes' => array(
      'class' => array('focal-point', 'focal-point-' . $delta),
      'data-delta' => $delta,
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'focal_point') . '/js/focal_point.js'),
      'css' => array(drupal_get_path('module', 'focal_point') . '/css/focal_point.css'),
    ),
  );
}

/**
 * Save the focal point for the provided images.
 *
 * @param array $images
 *   An array of image field data arrays normally found attached to a loaded
 *   entity. This is typically loaded via an entity_metadata_wrapper.
 */
function _focal_point_images_save($images) {
  // If there is only one image, then the "fid" property will exist.
  $images = isset($images['fid']) ? array($images) : $images;

  foreach ($images as $image) {
    focal_point_save($image['fid'], $image['focal_point']);
  }
}

/**
 * Determine whether or not the provided field can use focal point support.
 *
 * @param array $field
 *  A Drupal field definition
 * @param array $instance
 *  A Drupal field instance definition
 * @param bool $require_enabled (optional)
 *  TRUE if the instance must have focal_point enabled to be considered
 *  supported.
 *
 * @return bool
 */
function _focal_point_field_supported($field, $instance, $require_enabled = FALSE) {
  $supported = TRUE;

  $supported_field_types = array('image');
  $supported_widget_types = array('image_image');

  if ($require_enabled && empty($instance['settings']['focal_point_enabled'])) {
    $supported = FALSE;
  }
  elseif (!in_array($field['type'], $supported_field_types)) {
    $supported = FALSE;
  }
  elseif (!in_array($instance['widget']['type'], $supported_widget_types)) {
    $supported = FALSE;
  }

  return $supported;
}

/**
 * Flush generated images based on a file id.
 *
 * @param int $fid
 */
function _focal_point_flush($fid) {
  $file = file_load($fid);
  image_path_flush($file->uri);
}

function _focal_point_indicator($delta) {
  drupal_add_library('system', 'ui.draggable');

  $indicator = array(
    '#theme_wrappers' => array('container'),
    '#attributes' => array(
      'class' => array('focal-point-indicator'),
      'data-delta' => $delta,
    ),
    '#markup' => '',
  );

  return drupal_render($indicator);
}
