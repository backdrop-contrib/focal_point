<?php

/**
 * @file
 * Allow users to specify a focal point on content images.
 */

require_once dirname(__FILE__) .'/focal_point.effects.inc';

/**
 * Implements hook_menu().
 */
function focal_point_menu() {
  $items = array();

  $items['admin/config/media/focal_point'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Focal Point',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('focal_point_configuration_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'focal_point.admin.inc',
  );
  $items['focal_point/test-drive'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Focal Point Test Drive',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('focal_point_test_drive_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'focal_point.admin.inc',
  );
  $items['focal_point/preview/%/%'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Focal Point Preview',
    'page callback' => 'focal_point_preview_page',
    'page arguments' => array(2,3),
    'access arguments' => array('administer site configuration'),
    'file' => 'focal_point.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function focal_point_theme($existing, $type, $theme, $path) {
  return array(
    // @see image_style_theme().
    'focal_point_image_style' => array(
      'variables' => array(
        'focal_point' => NULL,
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
      'file' => 'focal_point.theme.inc',
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function focal_point_admin_paths() {
  $paths = array(
    'focal_point/test-drive' => TRUE,
    'focal_point/preview/*/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_file_load().
 */
function focal_point_file_load($files) {
  foreach ($files as &$file) {
    $file->focal_point = focal_point_get($file->fid);

    // Special handling for the "test drive file".
    if ($file->fid == variable_get('focal_point_test_drive_image', NULL)) {
      $file->focal_point = variable_get('focal_point_test_drive_focal_point', '50,50');
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function focal_point_form_file_entity_add_upload_alter(&$form, &$form_state) {
  // Add focal point to the file entity edit form used by the media browser.
  if (_focal_pint_enabled_for('media') && isset($form_state['step']) && $form_state['step'] == 4) {
    $fid = isset($form_state['values']['upload']) ? $form_state['values']['upload'] : $form_state['storage']['upload'];
    $file = file_load($fid);
    if (_focal_point_file_supported($file)) {
      $delta = 0;
      $field_name = 'media';
      $thumbnail = array(
        '#type' => 'markup',
        '#theme' => 'image_style',
        '#style_name' => variable_get('focal_point_preview_image_style', 'thumbnail'),
        '#path' => $file->uri,
        '#alt' => $file->alt,
        '#title' => $file->title,
      );

      $form['focal_point'] = array(
        'indicator' => _focal_point_indicator($field_name),
        'thumbnail' => $thumbnail,
        'preview_link' => _focal_point_preview_link($fid, $field_name, $delta),
        'focal_point' => _focal_point_field($field_name, $delta),
      );

      $form['#validate'][] = 'focal_point_form_validate';
      $form['#submit'][] = 'focal_point_form_submit';
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function focal_point_form_file_entity_edit_alter(&$form, &$form_state) {
  // Make sure we have an entity to work with.
  if (!isset($form['#entity'])) {
    return;
  }

  if (_focal_pint_enabled_for('media') && _focal_point_file_supported($form['#entity'])) {
    $form['preview']['#image_style'] = $form['preview']['#style_name'] = variable_get('focal_point_preview_image_style', 'thumbnail');

    $delta = _focal_point_media_field_delta();
    $form['focal_point'] = array(
      'indicator' => _focal_point_indicator('media', $delta),
      'thumbnail' => $form['preview'],
      'focal_point' => _focal_point_field('media', $delta, $form['#entity']->focal_point),
    );

    // The file entity form does something weird with its action buttons such that
    // adding handlers to the form's #submit and #validate arrays aren't used.
    $form['actions']['submit']['#validate'][] = 'focal_point_form_validate';
    $form['actions']['submit']['#submit'][] = 'focal_point_form_submit';
  }
}

/**
 * Implementation of hook_widget_form_alter().
 */
function focal_point_field_widget_form_alter(&$element, &$form_state, $context) {
  if (_focal_point_widget_supported($context['instance'])) {
    $widget_type = $context['instance']['widget']['type'];
    foreach (element_children($element) as $delta) {
      $element[$delta]['#attributes']['class'][] = 'focal_point';
      if (function_exists('focal_point_widget_'. $widget_type .'_process')) {
        $element[$delta]['#process'][] = 'focal_point_widget_'. $widget_type .'_process';
        $element[$delta]['#widget_delta'] = $delta;
      }
    }
  }
}

/**
 * Field widget process function.
 */
function focal_point_widget_image_image_process($element, &$form_state, $form) {
  // If a file has already been uploaded, include the necessary components of
  // for the focal point widget.
  $default_value = isset($element['#default_value']['focal_point']) ? $element['#default_value']['focal_point'] : '';
  $access = (bool) !empty($element['#file']);
  $delta = $element['#widget_delta'];
  $element['focal_point'] = _focal_point_field($element['#field_name'], $delta, $default_value, $access);

  return $element;
}

/**
 * Implements template_preprocess_image_widget().
 */
function focal_point_preprocess_image_widget(&$variables) {
  $element = &$variables['element'];

  // Add the "indicator" to the default image widget.
  if (isset($element['preview']) && isset($element['#widget_delta'])) {
    unset($element['preview']['#weight']);
    $preview = array(
      'indicator' => _focal_point_indicator($element['#field_name'], $element['#widget_delta']),
      'thumbnail' => $element['preview'],
      'preview_link' => _focal_point_preview_link($element['#file']->fid, $element['#field_name'], $element['#widget_delta']),
    );
    $element['preview'] = $preview;
  }
}

/**
 * Form submit function used to process the focal point form item.
 */
function focal_point_form_submit($form, &$form_state) {
  focal_point_save($form_state['file']->fid, $form_state['values']['focal_point']);
}

/**
 * Form validation function for the focal point form item.
 */
function focal_point_form_validate($form, &$form_state) {
  $focal_point = isset($form_state['values']['focal_point']) ? $form_state['values']['focal_point'] : '';
  if (!focal_point_validate($focal_point)) {
    form_set_error('focal_point', t('Focal points should be in the format ##,## without spaces where the numbers are between 1 and 100.'));
  }
}

/**
 * Validation function for the focal point widget.
 */
function focal_point_element_form_validate($element, &$form_state, $form) {
  $focal_point = isset($element['#value']['focal_point']) ? $element['#value']['focal_point'] : '';
  if (!empty($element['#file']) && !focal_point_validate($focal_point)) {
    form_error($element['focal_point'], t('Focal points should be in the format ##,## without spaces where the numbers are between 1 and 100.'));
  }
}

/**
 * Implementation of hook_field_attach_insert().
 */
function focal_point_field_attach_insert($entity_type, $entity) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Check every field as its data is being inserted and if it has focal point
  // support, save the focal point data.
  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    $field_name = $instance['field_name'];
    if (_focal_point_widget_supported($instance)) {
      $wrapper = entity_metadata_wrapper($entity_type, $entity);
      $images = $wrapper->{$field_name}->value();
      if (is_array($images)) {
        _focal_point_images_save($images);
      }
    }
  }
}

/**
 * Implementation of hook_field_attach_update().
 */
function focal_point_field_attach_update($entity_type, $entity) {
  focal_point_field_attach_insert($entity_type, $entity);
}

/**
 * Implementation of hook_file_delete().
 */
function focal_point_file_delete($file) {
  focal_point_delete($file->fid);
}

/**
 * Save the focal point data for a given file.
 *
 * @param int $fid
 *   The id of the image file in question.
 * @param string $focal_point
 *   In the form xx,yy where xx represents the left offset as a percent and yy
 *   represents the top offset as a percent.
 */
function focal_point_save($fid, $focal_point) {
  $existing_focal_point = focal_point_get($fid);
  $record = array(
    'fid' => $fid,
    'focal_point' => $focal_point,
  );

  // If the focal point has not changed, then there is nothing to see here.
  if ($existing_focal_point == $focal_point) {
    return;
  }

  // Create, update or delete the focal point.
  if ($existing_focal_point) {
    if (!empty($focal_point)) {
      // The focal point has changed to a non-empty value.
      drupal_write_record('focal_point', $record, 'fid');
      _focal_point_flush($fid);
    }
    else {
      // The focal point has changed to an empty value. Generated images will
      // be flushed in the delete function.
      focal_point_delete($fid);
    }
  }
  elseif (!empty($focal_point)) {
    // The focal point is both new and non-empty.
    drupal_write_record('focal_point', $record);
  }
}

/**
 * Validate a given focal point.
 *
 * @param string $focal_point
 *   The focal point string to test.
 *
 * @return bool
 */
function focal_point_validate($focal_point) {
  if (empty($focal_point) || preg_match('/^(100|[0-9]{1,2})(,)(100|[0-9]{1,2})$/', $focal_point)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns the focal point of the given image in the form '12,34' where 12 is
 * the distance from the left edge in percents and 34 is the distance from the
 * top edge in percents. If no focal point is found an empty string is returned.
 *
 * @param int $fid
 *   The fid of the image field entity in question.
 *
 * @return string
 */
function focal_point_get($fid) {
  $focal_points = &drupal_static(__FUNCTION__, array());

  if (!isset($focal_points[$fid])) {
    $select = db_select('focal_point', 'fp');
    $select->addField('fp', 'focal_point');
    $select->condition('fid', $fid);
    $focal_points[$fid] = $select->execute()->fetchField();
  }

  return $focal_points[$fid];
}

/**
 * Parse the string representation of the focal point into an array.
 *
 * @param string $focal_point
 *
 * @return array
 *   The x & y offsets (in percents) from the top left corner of the image.
 */
function focal_point_parse($focal_point = '') {
  if (empty($focal_point)) {
    $focal_point = '50,50';
  }

  return array_combine(array('x-offset', 'y-offset'), explode(',', $focal_point));
}

/**
 * Deletes the focal point for the given file entity.
 *
 * @param int $fid
 */
function focal_point_delete($fid) {
  _focal_point_flush($fid);
  db_delete('focal_point')
    ->condition('fid', $fid)
    ->execute();
}

/**
 * Define the focal point text field.
 *
 * @param string $field_name
 *   The name of the field containing the value of the focal point string.
 * @param int $delta
 *   (Optional) The delta of the image field to which this focal point field
 *   applies.
 * @param string $default_value
 *   The default value of the field
 * @param bool $access
 *   (Optional) Whether or not the field should be accessible.
 *
 * @return array
 */
function _focal_point_field($field_name, $delta = 0, $default_value = '50,50', $access = TRUE) {
  return array(
    '#type' => 'textfield',
    '#title' => 'Focal Point',
    '#description' => t('Specify the focus of this image in the form "leftoffset,topoffset" where offsets are in percents. Ex: 25,75'),
    '#default_value' => $default_value,
    '#access' => $access,
    '#element_validate' => array('focal_point_element_form_validate'),
    '#attributes' => array(
      'class' => array('focal-point', 'focal-point-' . $field_name . '-' . $delta),
      'data-delta' => $delta,
      'data-field-name' => $field_name,
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'focal_point') . '/js/focal_point.js'),
      'css' => array(drupal_get_path('module', 'focal_point') . '/css/focal_point.css'),
    ),
  );
}

/**
 * Save the focal point for the provided images.
 *
 * @param array $images
 *   An array of image field data arrays normally found attached to a loaded
 *   entity. This is typically loaded via an entity_metadata_wrapper.
 */
function _focal_point_images_save($images) {
  // If there is only one image, then the "fid" property will exist.
  $images = isset($images['fid']) ? array($images) : $images;

  foreach ($images as $image) {
    if (isset($image['focal_point'])) {
      focal_point_save($image['fid'], $image['focal_point']);
    }
  }
}

/**
 * Determine whether or not the provided field can use focal point support.
 *
 * @param array $instance
 *  A Drupal field instance definition
 *
 * @return bool
 */
function _focal_point_widget_supported($instance) {
  $supported = FALSE;

  if (_focal_pint_enabled_for('image')) {
    $supported_widget_types = array('image_image');
    drupal_alter('focal_point_supported_widget_types', $supported_widget_types);

    if (in_array($instance['widget']['type'], $supported_widget_types)) {
      $supported = TRUE;
    }
  }
  return $supported;
}

/**
 * Determine if the site is configured to enable focal point on the given widget
 * type.
 *
 * @param string $type
 *   The type of image field in question. image | media
 *
 * @return bool
 */
function _focal_pint_enabled_for($type) {
  $enabled_for = variable_get('focal_point_enabled_for', array('image', 'media'));
  return in_array($type, $enabled_for, TRUE);
}

/**
 * Determine whether or not the provided file entity can support a focal_point.
 *
 * @param mixed $file
 *   Either a loaded file object or an fid.
 *
 * @return bool
 */
function _focal_point_file_supported($file) {
  if (is_int($file)) {
    $file = file_load($file);
  }

  $supported_file_types = array('image');
  drupal_alter('focal_point_supported_file_types', $supported_file_types);

  return in_array($file->type, $supported_file_types);
}

/**
 * Flush generated images based on a file id.
 *
 * @param int $fid
 */
function _focal_point_flush($fid) {
  $file = file_load($fid);
  image_path_flush($file->uri);
}

/**
 * Build a render array for the focal point indicator crosshair.
 *
 * @param string $field_name
 *   (Optional) The name of the image field to which this focal point is
 *   referencing.
 * @param int $delta
 *   (Optional) The delta of the image field widget. This is needed to support
 *   image fields that have a cardinality greater than one.
 *
 * @return array
 */
function _focal_point_indicator($field_name = '', $delta = 0) {
  drupal_add_library('system', 'ui.draggable');

  $indicator = array(
    '#theme_wrappers' => array('container'),
    '#attributes' => array(
      'class' => array('focal-point-indicator'),
      'data-field-name' => $field_name,
      'data-delta' => $delta,
    ),
    '#markup' => '',
  );


  return $indicator;
}

/**
 * Helper function to keep track of the current delta of the media fields on
 * current page. This is necessary in case there are multiple file_edit_forms
 * being rendered together. Definitely an edge case, but I had a use-case.
 *
 * @return int
 */
function _focal_point_media_field_delta() {
  $delta = &drupal_static(__FUNCTION__, 0);
  return $delta++;
}

/**
 * Get a list of all image styles that use a focal point effect.
 *
 * @return array
 *   The same array returned by image_styles() with an extra 'loaded_style' key.
 *
 * @see image_styles()
 * @see image_style_load()
 */
function _focal_point_get_image_styles() {
  // Load all image styles defined on this site and filter out those that do
  // not use a focal point effect.
  module_load_include('inc', 'focal_point', 'focal_point.effects');
  $styles = image_styles();
  foreach ($styles as $isid => $style) {
    $focal_point_effects = array_keys(focal_point_image_effect_info());
    $loaded_style = image_style_load($style['name']);
    foreach ($loaded_style['effects'] as $effect) {
      if (in_array($effect['name'], $focal_point_effects)) {
        $styles[$isid]['loaded_style'] = $loaded_style;
        break;
      }
      else {
        unset($styles[$isid]);
      }
    }
  }

  return $styles;
}

/**
 * Return a render array that shows the derivative images of the given fid
 * using the given focal point for every style that uses a focal point effect.
 *
 * @param int $fid
 * @param string $focal_point
 * @param bool $show_original
 *   (Optional)
 *
 * @return array
 */
function _focal_point_preview($fid, $focal_point, $show_original = TRUE) {
  $file = is_numeric($fid) ? file_load($fid) : NULL;
  $output = array();

  // Using the example image, show every image style that uses a focal point
  // effect.
  $output['focal_point_examples'] = array(
    '#theme_wrappers' => array('container'),
    '#attributes' => array(
      'class' => array('focal_point_examples'),
    ),
  );
  if ($file) {
    if ($show_original) {
      $output['focal_point_examples']['original'] = array(
        '#type' => 'markup',
        '#prefix' => '<h2>' . t('Original Image') . '</h2>',
        '#theme' => 'image',
        '#path' => $file->uri,
        '#theme_wrappers' => array('container'),
        '#attributes' => array(),
      );
    }
    $styles = _focal_point_get_image_styles();
    if (!empty($styles)) {
      foreach ($styles as $isid => $style) {
        $output['focal_point_examples'][$isid] = array(
          '#type' => 'markup',
          '#prefix' => '<h2>' . $style['loaded_style']['name'] . '</h2>',
          '#theme' => 'focal_point_image_style',
          '#style_name' => $style['loaded_style']['name'],
          '#path' => $file->uri,
          '#focal_point' => $focal_point,
          '#theme_wrappers' => array('container'),
          '#attributes' => array(),
        );
      }
    }
    else {
      $output['focal_point_examples']['#markup'] = '<div class="messages warning">' . t('There are no styles defined that use a focal point effect. To see how this module will work you should <a href="@url">create a new image style</a> that uses one.', array('@url' => '/admin/config/media/image-styles')) . '</div>';
    }
  }

  return $output;
}

/**
 * Build a render array for the preview link.
 *
 * @param int $fid
 * @param string $field_name
 *   The name of the image field to which this focal point is referencing.
 * @param int $delta
 *   (Optional) The delta of the image field widget. This is needed to support
 *   image fields that have a cardinality greater than one.
 * @param string $focal_point
 *   (Optional) In the form xx,yy where xx represents the left offset as a
 *   percent and yy represents the top offset as a percent.
 *
 * @return array
 */
function _focal_point_preview_link($fid, $field_name, $delta = 0, $focal_point = '50,50') {
  $link_text = t('Quick Preview');
  $link_path = 'focal_point/preview/' . $fid . '/' . $focal_point;

  return array(
    '#type' => 'markup',
    '#markup' => l($link_text, $link_path, array('attributes' => array(
      'target' => '_blank',
      'class' => array(
        'focal-point-preview-link',
        'focal-point-preview-link-' . $field_name . '-' . $delta,
        'overlay-exclude',
      ),
      'data-delta' => $delta,
      'data-field-name' => $field_name,
    ))),
  );
}
